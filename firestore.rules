rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents {
    //
    // Search Index
    //
    function searchIndex() {
      let docPath = /databases/$(database)/documents/$(request.path[4])/$(request.path[6]);
      return get(docPath).data.authorId == request.auth.uid;
    }
    //
    // Counter helper functions
    //
    function createDoc(path) {
      // new doc
    	return existsAfter(path) && !exists(path);
    }
    function deleteDoc(path) {
      // remove doc
    	return exists(path) && !existsAfter(path);
    }
    function addCount(path, field) {
      // count++
      return getAfter(path).data[field] == get(path).data[field] + 1;
    }
    function subCount(path, field) {
      // count--
      return getAfter(path).data[field] == get(path).data[field] - 1;
    }
    function validSub(path, field) {
      // count-- or remove field
      return subCount(path, field)
        || (deleteField(path, field) && get(path).data[field] == 1);
    }
    function validAdd(path, field) {
      // count++ or add field
    	return addCount(path, field)
        || (createField(path, field) && getAfter(path).data[field] == 1);
    }
    function createField(path, field) {
      // new field
      return (!(field in get(path).data) && (field in getAfter(path).data))
        || createDoc(path);
    }
    function deleteField(path, field) {
      // remove field
      return ((field in get(path).data) && !(field in getAfter(path).data))
        || deleteDoc(path);
    }
    //
    // Counter Functions
    //
    function counter() {
      // function: Counter Function
      // usage: create, delete of your editing doc
      let docRef = /databases/$(database)/documents/_counters/$(request.path[3]);
      let field = 'count';
      let validAddCount = validAdd(docRef, field) && createDoc(request.path);
      let validSubCount = validSub(docRef, field) && deleteDoc(request.path);
      return validAddCount || validSubCount;
    }
    function counterDoc() {
      // function: Counter Document Function
      // usage: write of your _counter doc
      let docRef = getAfter(request.path).data['_tmpDoc'];
      let field = 'count';
			let validFields = request.resource.data.keys().hasOnly(['_tmpDoc', field]);
      let validAddCount = validAdd(request.path, field) && createDoc(docRef);
      let validSubCount = validSub(request.path, field) && deleteDoc(docRef);
      return (validAddCount || validSubCount) && validFields;
    }
    function aCounter(docField) {
      // function: Aggregate Counter Function
      // usage: create, delete of your editing doc
      // @params: doc ref field name to aggregate count
      let docRef = getLatestData(request.path)[docField];
      let field = request.path[3] + 'Count';
      let validAddCount = validAdd(docRef, field) && createDoc(request.path);
      let validSubCount = validSub(docRef, field) && deleteDoc(request.path);
      return validAddCount || validSubCount;
    }
    function aCounterDoc(docField) {
      // function: Aggregate Counter Document Function
      // usage: write of your aggregate document
      let tmpField = '_' + docField + 'Doc';
      let docRef = getAfter(request.path).data[tmpField];
      let field = docRef[3] + 'Count';
      let validFields = hasOnly([tmpField, field]);
      let validAddCount = validAdd(request.path, field) && createDoc(docRef);
      let validSubCount = validSub(request.path, field) && deleteDoc(docRef);
      return (validAddCount || validSubCount) && validFields;
    }
    //
    // Other helper functions
    //
    //function getAdded(field) {
    //  return request.resource.data[field].removeAll(resource.data[field]);
    //}
    //function getRemoved(field) {
    //	return resource.data[field].removeAll(request.resource.data[field]);
    //}
    //function validTag(field) {
    //  let ref = /databases/$(database)/documents/tags/$(field);
    //  return (field in getAdded('tags') && validAdd(ref, 'count'))
    //    || (field in getRemoved('tags') && validSub(ref, 'count'));
    //}
    function hasOnly(fields) {
    	return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
    function hasTime() {
      return request.time == request.resource.data[request.method + 'dAt']
        || request.method == 'delete';
    }
    function getLatestData(path) {
    	return request.method == 'delete'
        ? get(path).data
        : getAfter(path).data;
    }
    function getLatestId() {
      return request.method == 'delete'
        ? resource.id
        : request.resource.id;
    }
    function isOwner(field) {
      return request.method == 'create'
        ? request.resource.data[field] == request.auth.uid
        : resource.data[field] == request.auth.uid;
    }
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    function canWrite(field) {
      return getRole() == 'admin'
        || getRole() == 'editor'
        || (getRole() == 'author' && isOwner(field));
    }
    //
    // Collections canWrite
    //
    function canWriteAction() {
      // heart and bookmark doc
      let latestId = getLatestId().split('_');
      let latestData = getLatestData(request.path);
      let userId = latestData['userDoc'][4];
      let postId = latestData['postDoc'][4];
      return request.auth.uid == userId && (
      	(
        	latestId[1] == request.auth.uid
        	&& latestId[0] == postId
        	&& latestId.size() == 2
        	&& request.resource.data.keys().hasOnly(['postDoc', 'userDoc'])
      	) || deleteDoc(request.path)
      );
    }
    function canWritePost() {
      // post doc
      return canWrite('authorId') && (
      	(
        	hasTime()
        	&& request.resource.data.keys().hasAll(
          	['authorDoc', 'authorId', 'content', 'minutes', 'slug', 'title']
        	)
          && request.resource.data.content is string
          && request.resource.data.content.size() > 2
          && request.resource.data.title is string
          && request.resource.data.title.size() > 1
          && request.resource.data.tags.size() > 0
          && request.resource.data.slug is string
          // simple slug version, should be updated for utf8 characters
          && request.resource.data.slug == request.resource.data.title
            .lower().replace('[^a-z0-9]+', '-').replace('^-|-$','')
        ) || deleteDoc(request.path)
      );
    }
    function canWriteUser() {
      // user doc
    	return request.auth.uid == getLatestId();
    }
    //
    // Match Rules
    //
    match /posts/{document} {
      allow read;
      allow update: if aCounterDoc('hearts')
        || aCounterDoc('bookmarks')
        || canWritePost()
        || hasOnly(['tags']);
      allow create, delete: if counter()
        && aCounter('authorDoc')
        && canWritePost();
    }
    match /drafts/{document} {
      allow read;
      allow update: if canWritePost()
        || hasOnly(['imageUploads']);
      allow create, delete: if counter()
        && aCounter('authorDoc')
        && canWritePost();
    }
    match /hearts/{document} {
    	allow read;
      allow update: if false;
      allow create, delete: if counter()
        && aCounter('userDoc')
        && aCounter('postDoc')
        && canWriteAction();
    }
    match /bookmarks/{document} {
      allow read;
      allow update: if false;
      allow create, delete: if counter()
        && aCounter('userDoc')
        && aCounter('postDoc')
        && canWriteAction();
    }
    match /_counters/{document} {
      allow read;
      allow write: if counterDoc();
    }
    match /users/{document} {
      allow read;
      allow update: if aCounterDoc('hearts')
        || aCounterDoc('bookmarks')
        || canWriteUser();
      allow create, delete: if counter()
        && canWriteUser();
    }
    match /tags/{document} {
      allow read;
      allow write;
    }
    match /_search/{document=**} {
      allow read;
      allow write: if searchIndex();
    }
  }
}
